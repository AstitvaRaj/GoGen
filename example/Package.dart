// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class PackageEg {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  PackageEg(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  PackageEg.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Int> CPrintStruct(
    CStructA struct_a,
  ) {
    return _CPrintStruct(
      struct_a,
    );
  }

  late final _CPrintStructPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function(CStructA)>>(
          'CPrintStruct');
  late final _CPrintStruct =
      _CPrintStructPtr.asFunction<ffi.Pointer<ffi.Int> Function(CStructA)>();

  void CHelloFromGolang(
    CStructA x,
  ) {
    return _CHelloFromGolang(
      x,
    );
  }

  late final _CHelloFromGolangPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CStructA)>>(
          'CHelloFromGolang');
  late final _CHelloFromGolang =
      _CHelloFromGolangPtr.asFunction<void Function(CStructA)>();

  ffi.Pointer<ffi.Int> CPrintStringInGolang(
    ffi.Pointer<ffi.Char> s,
  ) {
    return _CPrintStringInGolang(
      s,
    );
  }

  late final _CPrintStringInGolangPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.Pointer<ffi.Char>)>>('CPrintStringInGolang');
  late final _CPrintStringInGolang = _CPrintStringInGolangPtr.asFunction<
      ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Int> CSum(
    int a,
    int b,
  ) {
    return _CSum(
      a,
      b,
    );
  }

  late final _CSumPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Int> Function(ffi.Int, ffi.Int)>>(
      'CSum');
  late final _CSum =
      _CSumPtr.asFunction<ffi.Pointer<ffi.Int> Function(int, int)>();

  ffi.Pointer<ffi.Int> CMultiply(
    int a,
    int b,
  ) {
    return _CMultiply(
      a,
      b,
    );
  }

  late final _CMultiplyPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Int> Function(ffi.Int, ffi.Int)>>(
      'CMultiply');
  late final _CMultiply =
      _CMultiplyPtr.asFunction<ffi.Pointer<ffi.Int> Function(int, int)>();

  ffi.Pointer<ffi.Int> CSubtraction(
    int a,
    int b,
  ) {
    return _CSubtraction(
      a,
      b,
    );
  }

  late final _CSubtractionPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Int> Function(ffi.Int, ffi.Int)>>(
      'CSubtraction');
  late final _CSubtraction =
      _CSubtractionPtr.asFunction<ffi.Pointer<ffi.Int> Function(int, int)>();
}

class CStructB extends ffi.Struct {
  @ffi.Int()
  external int A;

  @ffi.Int()
  external int B;
}

class CStructA extends ffi.Struct {
  @ffi.Int()
  external int A;

  external CStructB B;
}
